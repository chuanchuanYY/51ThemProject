C51 COMPILER V9.54   MAIN                                                                  05/19/2023 10:07:35 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\keil-v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "Delay.h"
   3          #include "UART.h"
   4          #include "DS18B20.h"
   5          void SendMessage(unsigned char* msg,int len);
   6          unsigned int crc_cal_value(unsigned char* data_value, unsigned char data_length);
   7          void writeCoils(int CoilsAddr,int onoff);
   8          void readCoilsStatu(int startAddr,int coilsCount);
   9          void resultKeepRegister(int StartAddr,int RegisterDataPort);
  10          unsigned int CRC;
  11          unsigned char Message[8]={0x01,0x03,0x00,0x00,0x00,0x01};//用于接收报文
  12          int mesgIndex=0;
  13          char mesgFlag=0;
  14          int LEDFlag=0;
  15          float T;//DS18B20温度值
  16          char SlaveAddr=0x01;//从机地址
  17          //unsigned char FunCode[10]={0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09};//功能码
  18          int Addr;//线圈地址或寄存器起始地址
  19          unsigned char Register[2];//一个寄存器2个字节
  20          int RegiNumber;//寄存器数量
  21          void main()
  22          {  
  23   1         DS18B20_ConvertT();    //上电先转换一次温度，防止第一次读数据错误
  24   1         Delay(1000);
  25   1         UART_Init();   //串口初始化
  26   1         CRC=crc_cal_value(Message,sizeof(Message)-2);
  27   1         Message[6]=(unsigned char)CRC;
  28   1         Message[7]=(unsigned char)(CRC>>8);
  29   1         SendMessage(Message,sizeof(Message));
  30   1        P1_0=0;
  31   1        while(1)
  32   1        {  
  33   2              DS18B20_ConvertT(); //转换温度
  34   2              T=DS18B20_ReadT();  //读取温度
  35   2              Register[1]=(char)T;
  36   2             /*  Delay(1000);
  37   2              UART_SendByte((char)T);
  38   2             */
  39   2            if(mesgFlag ==1 )//接收到8位报文
  40   2            {
  41   3              mesgIndex=0;
  42   3              mesgFlag=0;
  43   3              CRC=crc_cal_value(Message,sizeof(Message)-2);
  44   3              if(Message[6]==(unsigned char)CRC &&  Message[7]==(unsigned char)(CRC>>8))//验证CRC
  45   3              {
  46   4                  Addr=(Message[2]<<8);//
  47   4                  Addr|=Message[3];
  48   4                   RegiNumber=(Message[4]<<8);
  49   4                  RegiNumber|=Message[5];
  50   4                  switch(Message[1])//判断功能码
  51   4                  {
  52   5                    case 0x05:writeCoils(Addr,Message[4]==0xFF?0:1);
  53   5                      break;
  54   5                    case 0x03:resultKeepRegister(Addr,RegiNumber);
C51 COMPILER V9.54   MAIN                                                                  05/19/2023 10:07:35 PAGE 2   

  55   5                      break;
  56   5                    case 0x01:readCoilsStatu(Addr,RegiNumber);//coliscount的值跟RegiNumber一样计算 
  57   5                      break;
  58   5                  }
  59   4              }
  60   3            }
  61   2        //  P2_5=0;给0亮
  62   2        }
  63   1      }
  64          
  65          void SendMessage(unsigned char* msg,int len)
  66          {
  67   1        int i=0;
  68   1        for(i=0;i<len;i++)
  69   1        {
  70   2          UART_SendByte(msg[i]);
  71   2        }
  72   1      }
  73          void UART_Routine() interrupt 4
  74          {
  75   1        if(RI==1)         //如果接收标志位为1，接收到了数据
  76   1        {
  77   2            // P2=~SBUF;        //读取数据，取反后输出到LED
  78   2          if(mesgIndex>=8)return;
  79   2            Message[mesgIndex]=SBUF;//
  80   2            mesgIndex++;
  81   2            if(mesgIndex>=8)
  82   2            {
  83   3              mesgFlag=1;
  84   3              mesgIndex=0;
  85   3            }
  86   2          RI=0;         //接收标志位清0
  87   2        }
  88   1      }
  89          unsigned int crc_cal_value(unsigned char* data_value, unsigned char data_length)
  90          {
  91   1          int i;
  92   1          unsigned short crc_value = 0xffff;
  93   1          while (data_length--) 
  94   1          {
  95   2              crc_value ^= *data_value++;
  96   2              for (i = 0; i < 8; i++)
  97   2              {
  98   3                  if (crc_value & 0x0001)
  99   3                      crc_value = (crc_value >> 1) ^ 0xA001;
 100   3                  else
 101   3                      crc_value = crc_value >> 1;
 102   3              }
 103   2          }
 104   1          return(crc_value);
 105   1       }
 106          
 107           //写线圈
 108           void writeCoils(int CoilsAddr,int onoff)
 109           {
 110   1         switch(CoilsAddr)
 111   1         {
 112   2            case 0: P2_0=onoff;
 113   2             break;
 114   2            case 1: P2_1=onoff;
 115   2             break;
 116   2            case 2: P2_2=onoff;
C51 COMPILER V9.54   MAIN                                                                  05/19/2023 10:07:35 PAGE 3   

 117   2             break;
 118   2            case 3: P2_3=onoff;
 119   2             break;
 120   2            case 4: P2_4=onoff;
 121   2             break;
 122   2            case 5: P2_5=onoff;
 123   2             break;
 124   2            case 6: P2_6=onoff;
 125   2             break;
 126   2            case 7: P2_7=onoff;
 127   2             break;
 128   2           case 8: P1_0=onoff==1?0:1;//风扇
 129   2             break;
 130   2         }
 131   1         SendMessage(Message,sizeof(Message));
 132   1       }
 133           //读输出状态
 134          void readCoilsStatu(int startAddr,int coilsCount)
 135          {
 136   1         int datalen=((coilsCount/8)+(coilsCount%8>0?1:0));
 137   1         int retuleMsgLenth=4;
 138   1         unsigned char retuleMsg[50];
 139   1         retuleMsg[0]=SlaveAddr;
 140   1         retuleMsg[1]=0x01;
 141   1         retuleMsg[2]=(char)datalen;
 142   1        switch(startAddr)
 143   1        {
 144   2          case 0:retuleMsg[3]=~P2;retuleMsg[retuleMsgLenth++]=P1_0;
 145   2            break;
 146   2        }
 147   1            CRC =crc_cal_value(retuleMsg,retuleMsgLenth);
 148   1           retuleMsg[retuleMsgLenth++]=(unsigned char)CRC;
 149   1           retuleMsg[retuleMsgLenth]=(unsigned char)(CRC>>8);
 150   1           SendMessage(retuleMsg,retuleMsgLenth);
 151   1      }
 152           //读保持型寄存器
 153           int j=0;
 154           unsigned int crcValue;
 155           void resultKeepRegister(int StartAddr,int RegisterDataPort)//起始地址 和寄存器数
 156           {
 157   1         unsigned char retuleMsg[80];
 158   1         int retuleMsgLenth=3;
 159   1         retuleMsg[0]=SlaveAddr;
 160   1         retuleMsg[1]=0x03;
 161   1         retuleMsg[2]=((char)RegisterDataPort)*2;
 162   1         j=0;
 163   1         for(j=StartAddr;j<RegisterDataPort*2;j++)
 164   1         {
 165   2           if(j>=sizeof(Register))break;
 166   2           retuleMsg[j+3] =Register[j];
 167   2           retuleMsgLenth++;
 168   2         }
 169   1           crcValue =crc_cal_value(retuleMsg,retuleMsgLenth);
 170   1           retuleMsg[retuleMsgLenth++]=(unsigned char)crcValue;
 171   1           retuleMsg[retuleMsgLenth++]=(unsigned char)(crcValue>>8);
 172   1           SendMessage(retuleMsg,retuleMsgLenth);
 173   1       }
 174           
 175            


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.54   MAIN                                                                  05/19/2023 10:07:35 PAGE 4   

   CODE SIZE        =    851    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     30     149
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
